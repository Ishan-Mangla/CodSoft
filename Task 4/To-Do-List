#include <iostream>
#include <vector>
#include <string>

using namespace std;

struct Task {
    string description;
    bool completed;

    Task(string desc) {
        description = desc;
        completed = false;
    }
};

void addTask(vector<Task>& tasks) {
    cout << "\nWhat's on your mind? Add your next task to the list: ";
    string task;
    getline(cin, task);
    tasks.push_back(Task(task));
    cout << "\nTask added! You're one step closer to your goals!\n";
}

void viewTasks(const vector<Task>& tasks) {
    if (tasks.empty()) {
        cout << "\nYour task list is empty—looks like you've got a clear path ahead!\n";
        return;
    }
    cout << "\nHere’s your progress! Stay focused, you're doing great:\n";
    for (size_t i = 0; i < tasks.size(); ++i) {
        cout << i + 1 << ". " << tasks[i].description;
        if (tasks[i].completed) {
            cout << " [Completed]";
        } else {
            cout << " [Pending]";
        }
        cout << endl;
    }
}

void markTaskCompleted(vector<Task>& tasks) {
    if (tasks.empty()) {
        cout << "\nNo tasks available to mark as completed.\n";
        return;
    }

    viewTasks(tasks);
    cout << "\nWhich task have you completed? Enter the task number: ";
    int taskNumber;
    cin >> taskNumber;
    cin.ignore();

    if (taskNumber > 0 && taskNumber <= tasks.size()) {
        tasks[taskNumber - 1].completed = true;
        cout << "\nWell done! Task completed. Keep up the awesome work!\n";
    } else {
        cout << "\nInvalid task number. Try again.\n";
    }
}

void removeTask(vector<Task>& tasks) {
    if (tasks.empty()) {
        cout << "\nNo tasks available to remove.\n";
        return;
    }

    viewTasks(tasks);
    cout << "\nWhich task would you like to remove? Enter the task number: ";
    int taskNumber;
    cin >> taskNumber;
    cin.ignore();

    if (taskNumber > 0 && taskNumber <= tasks.size()) {
        tasks.erase(tasks.begin() + taskNumber - 1);
        cout << "\nClearing out the to-do list feels good, doesn’t it? Task removed!\n";
    } else {
        cout << "\nInvalid task number. Try again.\n";
    }
}

void editTask(vector<Task>& tasks) {
    if (tasks.empty()) {
        cout << "\nNo tasks available to edit.\n";
        return;
    }

    viewTasks(tasks);
    cout << "\nWhich task would you like to edit? Enter the task number: ";
    int taskNumber;
    cin >> taskNumber;
    cin.ignore();

    if (taskNumber > 0 && taskNumber <= tasks.size()) {
        cout << "\nEnter the new description for the task: ";
        string newDescription;
        getline(cin, newDescription);
        tasks[taskNumber - 1].description = newDescription;
        cout << "\nTask updated! Keep up the great work.\n";
    } else {
        cout << "\nInvalid task number. Try again.\n";
    }
}

int main() {
    vector<Task> tasks;
    int choice;

    do {
        cout << "\n===== Your Productivity Hub =====\n";
        cout << "1. Add Task\n";
        cout << "2. View Tasks\n";
        cout << "3. Mark Task as Completed\n";
        cout << "4. Remove Task\n";
        cout << "5. Edit Task\n";
        cout << "6. Exit\n";
        cout << "=================================\n";
        cout << "Choose an option: ";
        cin >> choice;
        cin.ignore(); // To ignore the newline character

        switch (choice) {
            case 1:
                addTask(tasks);
                break;
            case 2:
                viewTasks(tasks);
                break;
            case 3:
                markTaskCompleted(tasks);
                break;
            case 4:
                removeTask(tasks);
                break;
            case 5:
                editTask(tasks);
                break;
            case 6:
                cout << "\nThank you for using Your Productivity Hub! Keep conquering your tasks!\n";
                break;
            default:
                cout << "\nInvalid choice! Please try again.\n";
        }

    } while (choice != 6);

    return 0;
}
